// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment.sql

package database

import (
	"context"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payments (stripe_charge_id, amount, currency, status, email)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreatePaymentParams struct {
	StripeChargeID string
	Amount         int64
	Currency       string
	Status         string
	Email          string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, createPayment,
		arg.StripeChargeID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Email,
	)
	return err
}

const createRefund = `-- name: CreateRefund :exec
INSERT INTO refunds (stripe_refund_id, amount, status, email)
VALUES ($1, $2, $3, $4)
`

type CreateRefundParams struct {
	StripeRefundID string
	Amount         int64
	Status         string
	Email          string
}

func (q *Queries) CreateRefund(ctx context.Context, arg CreateRefundParams) error {
	_, err := q.db.ExecContext(ctx, createRefund,
		arg.StripeRefundID,
		arg.Amount,
		arg.Status,
		arg.Email,
	)
	return err
}

const getPaymentByStripeID = `-- name: GetPaymentByStripeID :one
SELECT id, email, stripe_charge_id, amount, currency, status, created_at, updated_at
FROM payments
WHERE stripe_charge_id = $1
`

func (q *Queries) GetPaymentByStripeID(ctx context.Context, stripeChargeID string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByStripeID, stripeChargeID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.StripeChargeID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefundByStripeID = `-- name: GetRefundByStripeID :one
SELECT id, email, stripe_refund_id, payment_id, amount, status, created_at, updated_at
FROM refunds
WHERE stripe_refund_id = $1
`

func (q *Queries) GetRefundByStripeID(ctx context.Context, stripeRefundID string) (Refund, error) {
	row := q.db.QueryRowContext(ctx, getRefundByStripeID, stripeRefundID)
	var i Refund
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.StripeRefundID,
		&i.PaymentID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE payments
SET status = $1
WHERE stripe_charge_id = $2
`

type UpdatePaymentStatusParams struct {
	Status         string
	StripeChargeID string
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentStatus, arg.Status, arg.StripeChargeID)
	return err
}
