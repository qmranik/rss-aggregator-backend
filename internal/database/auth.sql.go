// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (token, id)
VALUES ($1, $2)
`

type CreateRefreshTokenParams struct {
	Token string
	ID    uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.ID)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO user_sessions (session_id, user_id, expires_at)
VALUES ($1, $2, $3)
`

type CreateSessionParams struct {
	SessionID uuid.UUID
	UserID    uuid.NullUUID
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.SessionID, arg.UserID, arg.ExpiresAt)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions WHERE session_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionID)
	return err
}

const getSessionIDByRefreshToken = `-- name: GetSessionIDByRefreshToken :one
SELECT id FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetSessionIDByRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getSessionIDByRefreshToken, token)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, password_hash FROM users WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID           uuid.UUID
	PasswordHash string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const getUserUUIDBySessionID = `-- name: GetUserUUIDBySessionID :one
SELECT user_id FROM user_sessions WHERE session_id = $1
`

func (q *Queries) GetUserUUIDBySessionID(ctx context.Context, sessionID uuid.UUID) (uuid.NullUUID, error) {
	row := q.db.QueryRowContext(ctx, getUserUUIDBySessionID, sessionID)
	var user_id uuid.NullUUID
	err := row.Scan(&user_id)
	return user_id, err
}

const verifyUsername = `-- name: VerifyUsername :one
SELECT EXISTS(SELECT 1 FROM users WHERE username = $1) AS exists
`

func (q *Queries) VerifyUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, verifyUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
